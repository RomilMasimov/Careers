@model EditedOrderViewModel


<div class="jp_adp_main_section_wrapper">
    <div class="container">
        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="row">
            <div class="col-12">
                <div class="jp_adp_form_heading_wrapper">
                    <h2>@SharedLocalizer["orderDetails"]</h2>
                </div>
                <div class="jp_adp_form_wrapper">
                    <select asp-items="ViewBag.Categories" asp-for="@Model.CategoryId" id="categories"></select>
                </div>
                <div class="jp_adp_form_wrapper">
                    <select asp-items="ViewBag.SubCategories" id="subCategories"></select>
                </div>
                <div class="jp_adp_form_wrapper">
                    <select asp-items="ViewBag.Services" id="services"></select>
                </div>
            </div>
            <div id="quetions" class="col-12 mt-3 pb-3 border-top border-bottom"></div>
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="jp_adp_textarea_main_wrapper p-0 mt-4 border-0">
                    <textarea id="description" rows="5" placeholder="@SharedLocalizer["jobDescription"]"></textarea>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-md-4 col-xs-12">
                <div class="jp_adp_form_wrapper">
                    <select asp-items="ViewBag.Measurments" id="measurments"></select>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-md-4 col-xs-12">
                <div class="jp_adp_form_wrapper">
                    <input id="salary-min" type="number" placeholder="@SharedLocalizer["priceMin"]">
                </div>
            </div>
            <div class="col-lg-4 col-md-4 col-md-4 col-xs-12">
                <div class="jp_adp_form_wrapper">
                    <input id="salary-max" type="number" placeholder="@SharedLocalizer["priceMax"]">
                </div>
            </div>
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">

            </div>
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="jp_adp_choose_resume_bottom_btn_post">
                    <ul>
                        <li><a href="#" id="ClickButton"><i class="fa fa-plus-circle"></i> @SharedLocalizer["edit"] @SharedLocalizer["order"]</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script charset="utf-16">

        $(document).ready(function () {

            let categoryId = $('#categories').val();

            if (categoryId != "0") {

                categoriesLoaded().then(function () {

                   $('#subCategories option[value="@Model.SubCategoryId"]').attr('selected','selected');

                    subCategoriesLoaded().then(function () {

                        $('#services').val('@Model.ServiceId');

                        servicesLoaded().then(function () {

                            let answerIds = Array();
                            let modelInputanswers = Array();
                            let meetingPoints = Array();

                            @foreach(var item in Model.OrderMeetingPoints)
                            {
                                @:meetingPoints.push(@item);
                            }

                            @foreach(var item in Model.AnswerIds)
                            {
                                @:answerIds.push(@item);
                            }

                            let one = null;

                            @foreach (var item in Model.ClientAnswers)
                            {
                                @:one = { Answer: '@item.Answer', QuestionId: '@item.QuestionId' };
                                @:modelInputanswers.push(one);
                            }

                            $('#salary-min').val('@Model.SalaryMin');
                            $('#salary-max').val('@Model.SalaryMax');
                            $('#description').val('@Model.Description');
                            $('#measurments option[value="@Model.MeasurmentId"]').attr('selected', 'selected');

                            if ($('input[data-question-id]').length) {
                                $('input[data-question-id]').val('@Model.ClientLocation');
                            }

                            $('textarea[data-question-id]').each(function () {
                                let found = modelInputanswers.find(x => x.QuestionId == $(this).data('question-id'));
                                if (found) {
                                   $(this).val(found.Answer);
                                }
                            });

                            $('input[type="radio"]').each(function () {
                                if (+$.inArray(+$(this).val(), answerIds) != -1) {
                                    $(this).prop("checked", true);
                                }
                            });

                            $('input[type="checkbox"]').each(function () {
                                if (+$.inArray(+$(this).val(), answerIds) != -1) {
                                    $(this).prop("checked", true);
                                }
                            });

                            for (var i = 0; i < meetingPoints.length; i++) {
                                $('#points option[value="' + meetingPoints[i] + '"]').attr('selected', 'selected');
                            }
                            $('#points').trigger("chosen:updated");

                        });
                    });
                });
            }

        });

        $('#categories').change(categoriesLoaded);
        $('#subCategories').change(subCategoriesLoaded);
        $('#services').change(servicesLoaded);

        $('#ClickButton').click(async function (e) {

            e.preventDefault();

            let categoryId = null;
            let subCategoryId = null;
            let serviceId = null;
            let clientLocation = null;
            let description = null;
            let measurmentId = null;
            let salaryMin = null;
            let salaryMax = null;
            let answerIds = Array();
            let meetingPoints = Array();
            let clientInputAnswers = Array();


            $('input[type="radio"]:checked').each(function () {
                answerIds.push($(this).val());
            });

            $('input[type="checkbox"]:checked').each(function () {
                answerIds.push($(this).val());
            });

            if ($('#points')[0] != undefined) {
                let options = $('#points')[0].selectedOptions;
                for (var i = 0; i < options.length; i++) {
                    meetingPoints.push(options[i].value);
                }
            }

            $('textarea[data-question-id]').each(function () {
                clientInputAnswers.push({
                    QuestionId: $(this).data('question-id'),
                    Answer: $(this).val()
                });
            });

            categoryId = $('#categories').val();
            subCategoryId = $('#subCategories').val();
            serviceId = $('#services').val();
            clientLocation = $('input[data-question-id]').val();
            description = $('#description').val();
            measurmentId = $('#measurments').val();
            salaryMin = $('#salary-min').val();
            salaryMax = $('#salary-max').val() == '' ? null : $('#salary-max').val();

            let isHaveSingle = $('input').is('[type="radio"]');
            let isHaveMulti = $('input').is('[type="checkbox"]');
            let isHaveClientInputAnswers = $('textarea').is('[data-question-id]');

            //if (description == '' || salaryMin == '' || subCategoryId == 0 ||
            //    (isHaveSingle && answerIds.length == 0) || (isHaveMulti && answerIds.length == 0) ||
            //    (isHaveClientInputAnswers && clientInputAnswers.some(m => m.Answer == ''))) {
            //    alert('Enter required fields');
            //    return;
            //}

            await fetch( '@Url.Action("Edit", "Order")',
                {
                    method: 'post',
                    headers: new Headers({
                        'Content-Type': 'application/json'
                    }),
                    body: JSON.stringify({
                        Id:'@Model.Id',
                        CategoryId:categoryId,
                        SubCategoryId: subCategoryId,
                        ServiceId: serviceId,
                        ClientLocation: clientLocation,
                        Description: description,
                        MeasurmentId:measurmentId,
                        SalaryMin: salaryMin,
                        SalaryMax: salaryMax,
                        AnswerIds: answerIds,
                        OrderMeetingPoints: meetingPoints,
                        ClientAnswers: clientInputAnswers
                    })

                }).then((res) => {
                    if (res.ok) {
                        return res.json();
                    } else {
                        throw new Error('Something went wrong with sending data or action');
                    }

                }).then((json) => {
                    let url = '@Url.Action("Order", "Order",new {id=719 })';
                    if (json == 'error data') {
                        alert('Enter required fields');
                    } else {
                        url = url.replace("719", json);
                        window.location.href = url;
                    }
                });
        });



        //create.cshtml

        async function categoriesLoaded() {
            let categoryId = $('#categories option:selected').first().val();
            if (categoryId == 0) {
                $('#subCategories').children().slice(1).remove();
            } else {
                let url ='@Url.Action("SubCategoryOptions", "Order", new { categoryId = 719 })';
                url = url.replace("719", categoryId);
                let subCategories = await (await fetch(url)).text();
                $('#subCategories').html(subCategories);
            }
        };

        async function subCategoriesLoaded() {
            let subCategoryId = $('#subCategories option:selected').first().val();
            if (subCategoryId == 0) {
                $('#services').children().slice(1).remove();
                $('#quetions').html('');
            } else {

                let url ='@Url.Action("ServicesOptions", "Order", new { subCategoryId = 719 })';
                url = url.replace("719", subCategoryId);
                let services = await (await fetch(url)).text();
                $('#services').html(services);

                url ='@Url.Action("Questions", "Order", new { subCategoryId = 719 })';
                url = url.replace("719", subCategoryId);
                let questions = await (await fetch(url)).text();
                $('#quetions').html(questions);
            }
        };

        async function servicesLoaded() {
            let serviceId = $('#services option:selected').first().val();
            let subCategoryId = $('#subCategories option:selected').first().val();
            if (serviceId == 0) {

                let url ='@Url.Action("Questions", "Order", new { subCategoryId = 719 })';
                url = url.replace("719", subCategoryId);
                let questions = await (await fetch(url)).text();
                $('#quetions').html(questions);
            } else {

                 let url ='@(Html.Raw(Url.Action("Questions", "Order", new { subCategoryId = 718,serviceId=719 })))';
                url = url.replace("718", subCategoryId);
                url = url.replace("719", serviceId);
                let questions = await (await fetch(url)).text();
                $('#quetions').html(questions);
            }
        };

        //end


    </script>
}