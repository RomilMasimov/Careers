@using System.Globalization
@using System.Security.Claims

@model OrderAndChatViewModel
@{
    var isRu = CultureInfo.CurrentCulture.Name == "ru-RU";
}

<div class="jp_tittle_main_wrapper">
    <div class="jp_tittle_img_overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="jp_tittle_heading_wrapper">
                    <div class="jp_tittle_heading">
                        <h2>@SharedLocalizer["orderDetails"]</h2>
                    </div>
                    <div class="jp_tittle_breadcrumb_main_wrapper">
                        <div class="jp_tittle_breadcrumb_wrapper">
                            <ul>
                                <li>@SharedLocalizer["home"] <i class="fa fa-angle-right"></i></li>
                                <li><a asp-area="" asp-controller="Order" asp-action="Index">@SharedLocalizer["orders"] <i class="fa fa-angle-right"></i></a></li>
                                <li>@SharedLocalizer["orderDetails"]</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="jp_cp_profile_main_wrapper">
    <div class="container">
        <div class="col-lg-4 col-md-4 col-sm-12 col-xs-12">
            <div class="message-lists border">
                <a href="#" id="orderButton" class="message-single border-bottom active">
                    <div class="body">
                        <h6 class="username">@SharedLocalizer["jobOverview"]</h6>
                    </div>
                </a>
                <div class="message-search border-bottom">
                    <div class="p-2 d-flex align-items-center justify-content-between">
                        <strong>@SharedLocalizer["receiveResponses"]</strong>
                        <label class="switch m-0">
                            <input id="isActive" type="checkbox" @(Model.IsActive ? "checked" : "")>
                            <span class="slider round"></span>
                        </label>
                    </div>
                </div>
                <div id="chats" style="height: 75vh;  overflow-y: auto;">
                    @foreach (var message in Model.Messages)
                    {
                        <a href="#" data-chatId="@message.Id" data-spec-id="@message.Specialist.AppUserId" id="chatButton" class="message-single">
                            <div class="thumb">
                                <img src="@message.Specialist.ImageUrl" error-src="" class="img-fluid" alt="Profile image">
                            </div>
                            <div class="body">
                                <h6 class="username">@message.Specialist.Name @message.Specialist.Surname</h6>
                                <span class="send-time">@message.Specialist.LastVisit.ToShortTimeString()</span>
                            </div>
                        </a>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-8 col-md-8 col-sm-12 col-xs-12 mt-md-0 mt-3">
            <div id="orderContainer">
                <partial name="_OrderOverviewPartial" model="@Model" />
            </div>

            <div id="chatContainer" style="position: relative" class="message-box">
                <div id="messages">

                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {

    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script>

        //timeout need fix

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat")
            .withAutomaticReconnect().build();
        hubConnection.serverTimeoutInMilliseconds = 100000;

        hubConnection.start().then(function() {
                console.log("connected");
            });

        $('#isActive').change(async function() {
            let input = $(this);
            let isActive = input.prop("checked");
            let result = await(await fetch(`@Url.Action("ChangeIsActiveOrder", "Order")?id=@Model.Id&isActive=${
                input.prop("checked")}`)).json();
            if (!result) {
                setTimeout(function() {
                        input.attr("checked", !isActive);
                    },
                    500);
            }
        });

        $('#orderButton').click(async function(e) {
            e.preventDefault();
            let html = await(await fetch('@Url.Action("GetOrderOverview", new { id = Model.Id })')).text();
            $('#orderContainer').html(html);
            $('#orderContainer').show();
            $('#chatContainer').hide();
        });

        $('#chats').on('click', '[data-chatId]', async function (e) {
            e.preventDefault();
            let chatId = $(this).data('chatid');
            let specId = $(this).data('spec-id');

            let html = await (await fetch(`@Url.Action("GetConversation")/${chatId}`)).text();
            if (html == 'NotFound') {
                e.preventDefault();
                $('#orderContainer').show();
                $('#chatContainer').hide();
            } else {
                $('#messages').data('spec-id', specId);
                $('#messages').data('chat-id', chatId);
                $('#messages').html('');
                $('#messages').prepend(html);
                $('#orderContainer').hide();
                $('#chatContainer').show();

                // Scroll conversation to bottom
                let conversation = $(".dashboard-conversation");
                conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);
            }

            //upload image in sending message
            function upload(file) {

            let data = new FormData();
            data.append('file', file);

            fetch('@Url.Action("GetImage", "Order")',
                {
                    method: 'POST',
                    body: data
                }).then(
                response => response.json() // if the response is a JSON object
            ).then(
                path => {
                    let img = `<div class="col-md-4 col-6 pr-0 h-100 review-image">
                            <img src="${path}" class="pb-1">
                            <button data-delete type="button"></button>
                            <span data-delete class="cross">&times;</span>
                         </div>`;
                    $(".image-container").append(img);
                    //$(".image-container > :last").attr("src", path);
                }
            ).catch(
                error => console.error(error)
            );
        };

            // Обработчик нажатия на кнопку удаления картинки
            $("#messages").on("click", "[data-delete]", function () {
                $(this).offsetParent().remove();
                console.log('delete image');
                if($(".image-container").children().length == 0) {
                    $(".dashboard-conversation").height("49%");
                    $(".image-container").hide();
                }
            });

            $('#chatContainer').on('click', '#select', async function () {
                let result = await(await fetch(`@Url.Action("SelectSpecialist", "Order", new { orderId = Model.Id })&specialistId=${specId}`)).json();
                if (result) {
                    $('#buttons').html(`<button type="button" id="refuse" class="btn btn-sm btn-danger mr-2">Отказаться</button>
                                        <button type="button" id="complete" class="btn btn-sm btn-danger mr-2">Завершить выполнение</button>`);
                    $('#isActive').attr("checked", false)
                }
            });

            $('#chatContainer').on('click', '#complete', async function () {
                let result = await(await fetch('@Url.Action("CompleteOrder", "Order", new { orderId = Model.Id })')).json();
                if (result) {
                    $(this).remove();
                    $('#isActive').attr("checked", false)
                }
            });

            $('#chatContainer').on('click', '#refuse', async function () {
                let result = await(await fetch('@Url.Action("RefuseSpecialist", "Order", new { orderId = Model.Id })')).json();
                if (result) {
                    $('#buttons').html('<button type="button" id="select" class="btn btn-sm btn-danger mr-2">Выбрать этого мастера</button>');
                    $('#isActive').attr("checked", true)
                }
            });

            //file selected
            $(function() {
                $("input:file").change(function() {
                    let fileName = $(this).val();
                    if (fileName.length > 1) {
                        upload($("input:file")[0].files[0]);
                        $(".image-container").show();
                        $(".dashboard-conversation").height("calc(100% - 145px)");
                    }
                });
            });

            //Receive message
            hubConnection.on("ReceiveMessage",async function (msg) {

                let data = new FormData();
                data.append('IsRead', msg.isRead);
                data.append('Author', msg.author);
                data.append('AuthorImagePath', msg.authorImagePath);
                data.append('Text', msg.text);
                data.append('DateTime', msg.dateTime);
                data.append('images',JSON.stringify( msg.imagePaths));

                let html = '';

                await fetch('@Url.Action("RenderMessage", "Order")',
                    {
                        method: 'POST',
                        body: data
                    }).then(
                    async  response => {
                        let htmlResponse = await response.text();
                        html = htmlResponse;
                    }).catch(
                    error => console.error(error)
                    );

                $('.dashboard-conversation').append(html);
                let conversation = $(".dashboard-conversation");
                conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);
            });

            async function sendMessage() {
                    let Message = $("#text").val();
                    let DialogId = $('#messages').data('chat-id');
                    let ReceiverId = $('#messages').data('spec-id');
                    let ImgPaths = [];
                    let AuthorImageUrl = '@Model.AuthorImageUrl';
                    let Author = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';


                    $(".image-container img").each(  function() {
                        let part1 = '/images/';
                        let part2 = this.src.split("/images/")[1];
                        ImgPaths.push(part1 + part2);
                    });

                    let message = {
                        Message,
                        DialogId,
                        ReceiverId,
                        ImgPaths,
                        AuthorImageUrl
                    };

                    hubConnection.invoke("Send", message);

                    let data = new FormData();
                    data.append('AuthorImagePath', AuthorImageUrl);
                    data.append('Text', Message);
                    data.append('images', JSON.stringify(ImgPaths));
                    data.append('Author',Author);

                    let html = '';
                    await fetch('@Url.Action("RenderMessage", "Order")',
                        {
                            method: 'POST',
                            body: data
                        }).then(
                        async  response => {
                            let htmlResponse = await response.text();
                            html = htmlResponse;
                        }).catch(
                        error => console.error(error)
                    );

                    $(".image-container")[0].innerHTML = '';
                    $(".image-container").hide();
                    $("#text").val('');
                    $(".dashboard-conversation").height("49%");
                    $('.dashboard-conversation').append(html);
                    let conversation = $(".dashboard-conversation");
                    conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);
            }

            //send message
            $('#text').keydown(async function (e) {

                if (e.ctrlKey && e.keyCode == 13) {

                    await sendMessage();
                }
            });

            $("#btnSendMessage").on("click", sendMessage);
        });

    </script>
}