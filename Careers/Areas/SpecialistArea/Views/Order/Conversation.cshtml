@using System.Security.Claims
@model Careers.Models.Extra.MessagesAndCurrentUser

@{
    var spec = Model.Dialog.UserSpecialistMessage.Specialist;
    var client = Model.Dialog.UserSpecialistMessage.Client;
}

<div class="jp_tittle_main_wrapper">
    <div class="jp_tittle_img_overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="jp_tittle_heading_wrapper">
                    <div class="jp_tittle_heading">
                        <h2>@SharedLocalizer["conversation"]</h2>
                    </div>
                    <div class="jp_tittle_breadcrumb_main_wrapper">
                        <div class="jp_tittle_breadcrumb_wrapper">
                            <ul>
                                <li>
                                    <a asp-area="SpecialistArea"
                                       asp-controller="Order"
                                       asp-action="MyOrders">
                                       @SharedLocalizer["myOrders"] <i class="fa fa-angle-right"></i>
                                    </a>
                                </li>
                                <li>@SharedLocalizer["conversation"]</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="jp_cp_profile_main_wrapper">
    <div class="container">
        <div id="chatContainer" class="message-box" style="position: relative">
            <div class="message-box-header">

                @if (Model.UserId == spec.AppUserId)
                {
                    <h5>@client.Name @client.Surname</h5>
                }
                else
                {
                    <h5>@spec.Name @spec.Surname</h5>
                }
                @*<div class="navbar navbar-expand-sm drop">

                    <!-- Links -->
                    <ul class="navbar-nav">

                        <!-- Dropdown -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbardrop1" data-toggle="dropdown" aria-expanded="false">
                                <i class="fa fa-ellipsis-h"></i>
                            </a>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" href="#"><i class="fa fa-link"></i>&nbsp;&nbsp;Copy this link</a>
                                <a class="dropdown-item" href="#"><i class="fa fa-tag"></i>&nbsp;&nbsp;Report</a>
                                <a class="dropdown-item" href="#"><i class="fa fa-flag"></i>&nbsp;&nbsp;Hide</a>
                            </div>
                        </li>
                    </ul>
                </div>*@
            </div>

            <div style="height: 75vh;">
                <ul class="dashboard-conversation" style="height: 100%; overflow-y: scroll;">
                    @foreach (var message in Model.Dialog.Messages)
                    {
                        <partial name="_MessagePartial" model="message" />
                    }

                </ul>
                <div class="image-container row py-2" style="right: 15px"></div>
            </div>
            <partial name="_SendFormPartial"/>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/magnific-popup/js/jquery.magnific-popup.min.js"></script>

    <script type="text/javascript">

        let conversation = $(".dashboard-conversation");
            conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat")
            .withAutomaticReconnect().build();
        hubConnection.serverTimeoutInMilliseconds = 100000;

        $(document).ready(function () {
            $("[data-images]").magnificPopup({
                delegate: 'a',
                type: 'image',
                gallery: {
                    enabled: true,
                    navigateByImgClick: true,
                    preload: [0, 1]
                },
                zoom: {
                    enabled: true,
                    duration: 300,
                    easing: 'ease-in-out'
                }
            });
        });

        function upload(file) {

            let data = new FormData();
            data.append('file', file);

            fetch('@Url.Action("GetImage", "Order")',
                {
                    method: 'POST',
                    body: data
                }).then(
                response => response.json() // if the response is a JSON object
            ).then(
                path => {
                    let img = `<div class="col-md-4 col-6 pr-0 h-100 review-image">
                            <img src="${path}" class="pb-1">
                            <button data-delete type="button"></button>
                            <span data-delete class="cross">&times;</span>
                         </div>`;
                    $(".image-container").append(img);
                }
            ).catch(
                error => console.error(error)
            );
        };

        // Обработчик нажатия на кнопку удаления картинки
        $(".image-container").on("click", "[data-delete]", function () {
            $(this).offsetParent().remove();
            if($(".image-container").children().length == 0) {
                $(".dashboard-conversation").height("49%");
                $(".image-container").hide();
            }
        });

        //file selected
        $(function() {
            $("input:file").change(function() {
                let fileName = $(this).val();
                if (fileName.length > 1) {
                    upload($("input:file")[0].files[0]);
                    $(".image-container").show();
                    $(".dashboard-conversation").height("calc(100% - 145px)");
                }
            });
        });

        //Receive message
        hubConnection.on("ReceiveMessage",async function (msg) {

            let data = new FormData();
            data.append('IsRead', msg.isRead);
            data.append('Author', msg.author);
            data.append('AuthorImagePath', msg.authorImagePath);
            data.append('Text', msg.text);
            data.append('DateTime', msg.dateTime);
            data.append('images', JSON.stringify(msg.imagePaths));

            let html = '';

            await fetch('@Url.Action("RenderMessage", "Order",new{area="SpecialistArea"})',
                {
                    method: 'POST',
                    body: data
                }).then(
                async  response => {
                    let htmlResponse = await response.text();
                    html = htmlResponse;
                }).catch(
                error => console.error(error)
                );

            $('.dashboard-conversation').append(html);
            let conversation = $(".dashboard-conversation");
            conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);
        });



        async function sendMessage() {
            let Message = $("#text").val();
            let DialogId = parseInt( '@Model.Dialog.UserSpecialistMessage.Id');
            let ReceiverId = '@Model.Dialog.UserSpecialistMessage.Client.AppUserId';
            let ImgPaths =[];
            let AuthorImageUrl = '@Model.AuthorImageUrl';
            let Author = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';


            $(".image-container img").each(function() {
                let part1 = '/images/';
                let part2 = this.src.split("/images/")[1];
                ImgPaths.push(part1 + part2);
            });


            let message = {
                Message,
                DialogId,
                ReceiverId,
                ImgPaths,
                AuthorImageUrl
            };

            hubConnection.invoke("Send", message);

            let data = new FormData();
            data.append('AuthorImagePath', AuthorImageUrl);
            data.append('Text', Message);
            data.append('Author',Author);
            data.append('images', JSON.stringify(ImgPaths));

            let html = '';
            await fetch('@Url.Action("RenderMessage", "Order",new{area="SpecialistArea"})',
                {
                    method: 'POST',
                    body: data
                }).then(
                async  response => {
                    let htmlResponse = await response.text();
                    html = htmlResponse;
                }).catch(
                error => console.error(error)
            );

            $(".image-container")[0].innerHTML = '';
            $(".image-container").hide();
            $("#text").val('');
            $(".dashboard-conversation").height("49%");
            $('.dashboard-conversation').append(html);
            let conversation = $(".dashboard-conversation");
            conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);
        }

        //send message
        $('#text').keydown(async function (e) {

            if (e.ctrlKey && e.keyCode == 13) {

               await sendMessage();
            }
        });

        $("#btnSendMessage").on("click",sendMessage);

        //start
        hubConnection.start().then(function() {
            console.log("connected");
        });

    </script>
}
