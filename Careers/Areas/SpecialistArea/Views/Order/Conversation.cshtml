@model Careers.Models.Extra.MessagesAndCurrentUser

@{
    var spec = Model.Dialog.UserSpecialistMessage.Specialist;
    var client = Model.Dialog.UserSpecialistMessage.Client;
}

<div class="jp_tittle_main_wrapper">
    <div class="jp_tittle_img_overlay"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="jp_tittle_heading_wrapper">
                    <div class="jp_tittle_heading">
                        <h2>Conversation</h2>
                    </div>
                    <div class="jp_tittle_breadcrumb_main_wrapper">
                        <div class="jp_tittle_breadcrumb_wrapper">
                            <ul>
                                <li>
                                    <a asp-area="SpecialistArea"
                                       asp-controller="Order"
                                       asp-action="MyOrders">
                                        My orders <i class="fa fa-angle-right"></i>
                                    </a>
                                </li>
                                <li>Conversation</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="jp_cp_profile_main_wrapper">
    <div class="container">
        <div id="chatContainer" class="message-box" style="position: relative">
            <div class="message-box-header">

                @if (Model.UserId == spec.AppUserId)
                {
                    <h5>@spec.Name @spec.Surname</h5>
                }
                else
                {
                    <h5>@client.Name @client.Surname</h5>
                }
                <div class="navbar navbar-expand-sm drop">

                    <!-- Links -->
                    <ul class="navbar-nav">

                        <!-- Dropdown -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbardrop1" data-toggle="dropdown" aria-expanded="false">
                                <i class="fa fa-ellipsis-h"></i>
                            </a>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" href="#"><i class="fa fa-link"></i>&nbsp;&nbsp;Copy this link</a>
                                <a class="dropdown-item" href="#"><i class="fa fa-tag"></i>&nbsp;&nbsp;Report</a>
                                <a class="dropdown-item" href="#"><i class="fa fa-flag"></i>&nbsp;&nbsp;Hide</a>

                            </div>
                        </li>
                    </ul>
                </div>
            </div>

            <ul class="dashboard-conversation" style="height: 75vh;  overflow-y: scroll;">

                @foreach (var message in Model.Dialog.Messages)
                {
                    <li class="conversation @(Model.UserId==message.Author? "in" : "out")">
                        <div class="avater">
                            <img src="@(message.Author==spec.AppUserId? spec.ImageUrl:client.ImageUrl)"
                                 error-src="" class="img-fluid" alt="">
                        </div>
                        <div class="message">
                            <span>@message.Text</span>

                            <div data-images class="row mt-1 px-2">
                                @foreach (var path in message.ImagePaths)
                                {
                                    <div class="col-lg-3 col-md-4 col-sm-6 px-1 mb-2 review-sm-image">
                                        <a href="@path">
                                            <img src="@path" alt="image">
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                        <span class="send-time">@message.DateTime.ToShortTimeString()</span>
                    </li>
                }

            </ul>
            <div class="image-container row py-2" style="right: 15px"></div>
            <div class="conversation-write-wrap">
                <form>
                    <textarea id="text" placeholder="Type a message"></textarea>
                    <label class="send-image">
                        <input type="file"><i class="fa fa-file-image-o"></i>
                    </label>
                    <button type="button" id="btnSendMessage" class="send-message"><i class="fa fa-location-arrow"></i></button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/magnific-popup/js/jquery.magnific-popup.min.js"></script>

    <script type="text/javascript">

        let conversation = $(".dashboard-conversation");
            conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/hub")
            .withAutomaticReconnect().build();
        hubConnection.serverTimeoutInMilliseconds = 100000;

        $(document).ready(function () {
            $("[data-images]").magnificPopup({
                delegate: 'a',
                type: 'image',
                gallery: {
                    enabled: true,
                    navigateByImgClick: true,
                    preload: [0, 1]
                },
                zoom: {
                    enabled: true,
                    duration: 300,
                    easing: 'ease-in-out'
                }
            });
        });

        function upload(file) {

            let data = new FormData();
            data.append('file', file);

            fetch('@Url.Action("GetImage", "Order")',
                {
                    method: 'POST',
                    body: data
                }).then(
                response => response.json() // if the response is a JSON object
            ).then(
                path => {
                    let img = `<div class="col-md-4 col-6 pr-0 h-100 review-image">
                            <img src="${path}" class="pb-1">
                            <button data-delete type="button"></button>
                            <span data-delete class="cross">&times;</span>
                         </div>`;
                    console.log($(".image-container"));
                    $(".image-container").append(img);
                }
            ).catch(
                error => console.error(error)
            );
        };

        // Обработчик нажатия на кнопку удаления картинки
        $(".image-container").on("click", "[data-delete]", function () {
            $(this).offsetParent().remove();
            if($(".image-container").children().length == 0) {
                $(".image-container").hide();
            }
        });

        //file selected
        $(function() {
            $("input:file").change(function() {
                let fileName = $(this).val();
                if (fileName.length > 1) {
                    upload($("input:file")[0].files[0]);
                    $(".image-container").show();
                }
            });
        });

        //Receive message
        hubConnection.on("ReceiveMessage", function (data) {
            console.log(data);
            console.dir(data);
        });

        //send message
        $("#btnSendMessage").on("click",async function(e) {
            let message = $("#text").val();
            let chatId = parseInt( '@Model.Dialog.UserSpecialistMessage.Id');
            let userId = '@Model.Dialog.UserSpecialistMessage.Specialist.AppUserId';
            let imgPathes = [];

            $(".image-container img").each(  function() {
                let part1 = '/images/';
                let part2 = this.src.split("/images/")[1];
                imgPathes.push(part1 + part2);
            });

            hubConnection.invoke("Send", chatId, userId, imgPathes, message);

            let data = new FormData();
            data.append('message', message);
            data.append('imagesJson', JSON.stringify(imgPathes).toString());

            let html = '';
            await fetch('@Url.Action("RenderMessage", "Order",new{area="SpecialistArea"})',
                {
                    method: 'POST',
                    body: data
                }).then(
                async  response => {
                    let htmlResponse = await response.text();
                    html = htmlResponse;
                }).catch(
                error => console.error(error)
            );

            $(".image-container")[0].innerHTML = '';
            $(".image-container").hide();
            $("#text").val('');
            $('.dashboard-conversation').append(html);
            let conversation = $(".dashboard-conversation");
            conversation.scrollTop(conversation[0].scrollHeight - conversation[0].clientHeight);
        });

        //start
        hubConnection.start().then(function() {
            console.log("connected");
        });

    </script>
}
